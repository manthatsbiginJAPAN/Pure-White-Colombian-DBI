CREATE TABLE Student ( --links a student id to a name 
StuID varchar2(10)
, FirstName varchar2(20) NOT NULL
, LastName varchar2(20) NOT NULL -- in the pdf it doesn't say that it has to be not null... but that's kinda :/
, Email varchar2(100) UNIQUE --nullable? Not everyone will have an email right?
, ContactNo varchar2(10) NOT NULL
, Password varchar2(50) NOT NULL -- ie admin assigns pw at the start, could be bday for example
, PRIMARY KEY (StuID)
);

CREATE TABLE Unit ( --links a unit to a name
UnitID varchar2 (10)
, UnitName varchar2 (50) NOT NULL
, UnitDesc varchar2 (200)
, PRIMARY KEY (UnitID)
);

CREATE TABLE UnitOffering ( -- links unit to a point in time (year and semester) and assigns convener
UnitID varchar2(10) NOT NULL
, Semester number(1) NOT NULL
, Year number(4) NOT NULL
, PRIMARY KEY (UnitID, Semester, Year)
, FOREIGN KEY (UnitID) REFERENCES Unit
);

CREATE TABLE Enrolment ( --links an enrolled student to an offered unit
StudID varchar2(10) NOT NULL
, UnitID varchar2(10) NOT NULL
, Semester number(1) NOT NULL
, Year number(4) NOT NULL
, PRIMARY KEY (StuID, UnitID, Semester, Year)
, FOREIGN KEY (StuID) REFERENCES Student
, FOREIGN KEY (UnitID, Semester, Year) REFERENCES UnitOffering
);

-------------------------------------------------------------------------------------

CREATE TABLE Employee ( --links an employee id to a name
EmpID varchar2(10)
, FirstName varchar2(30) NOT NULL
, LastName varchar2 (30) NOT NULL
, Email varchar2(100) UNIQUE
, ContactNo varchar2(10) NOT NULL
, Password varchar2(50) NOT NULL
, PRIMARY KEY (EmpID)
);

CREATE TABLE Role ( --lists the number of roles available (ie convener, admin and supervisor)
Role varchar2(20) -- use a check constraint? Extra points. Ok
--, RoleDescription varchar2 (200) -- neccessary?
, PRIMARY KEY (Role)
);

CREATE TABLE EmployeeRole ( --Links an employee to a particular role in a particular offered unit 
EmpID varchar2(10) NOT NULL -- do we need to explicitly say 'not null' for all of these below?
, Role varchar2(20) NOT NULL
, UnitID varchar2(20) NOT NULL
, Semester number(1) NOT NULL
, Year number(4) NOT NULL
, PRIMARY KEY (EmpID, Role, UnitID, Semester, Year)
, FOREIGN KEY (EmpID) REFERENCES Employee
, FOREIGN KEY (Role) REFERENCES Role
, FOREIGN KEY (UnitID, Semester, Year) REFERENCES UnitOffering
);


-------------------------------------------------------------------------------------


CREATE TABLE Project ( --Links a projectID (with description) to an offered unit 
ProjID varchar2(10) NOT NULL
, ProjDesc varchar2(200) NOT NULL
, UnitID varchar2(10) NOT NULL
, Semester number(1) NOT NULL
, Year number (4) NOT NULL
, PRIMARY KEY (ProjID, UnitID, Semester, Year)
, FOREIGN KEY (UnitID, Semester, Year) REFERENCES UnitOffering
);


CREATE TABLE Assessment ( --links an assessment to a unit offering - I think they would surely have to be able to alter assessments for each subject
AssID varchar2(10) NOT NULL
, AssTitle varchar2(50) NOT NULL
, AssDesc varchar2(200) NOT NULL
, UnitID varchar2(10) NOT NULL
, Semester number(2) NOT NULL
, Year number(4) NOT NULL
, Group boolean --how do we distinguish individual assessments from group ones...?
, MarkingGuide varchar2(1000)
, DueDate Date NOT NULL
, PRIMARY KEY (AssID, UnitID, Semester, Year)
, FOREIGN KEY (UnitID, Semester, Year) REFERENCES UnitOffering
);


CREATE TABLE AssessmentAllocation ( --links enrolled students to an assessment in an offered unit
AssID varchar2(10) NOT NULL
, StuID varchar2(10) NOT NULL
, TeamID varchar2(10) --SHOULD be nullable... ie it's blank if it's an individual assessment, otherwise links with team
						-- but not sure how to approach this...
, PRIMARY KEY (AssID, StuID)
, FOREIGN KEY (AssID) REFERENCES Assessment
, FOREIGN KEY (StuID) REFERENCES Enrolment
, FOREIGN KEY (TeamID) REFERENCES Team --cos this part is where it's not going to like it
);

-------------------------------------------------------------------------------------

CREATE TABLE Team ( --links a Team to a project within an offered unit, and with a supervisor
TeamID varchar2(10) NOT NULL
, ProjectID varchar2(10) NOT NULL
, UnitID varchar2(10) NOT NULL
, Semester number(1) NOT NULL
, Year number (4) NOT NULL
, EmpID varchar2(10) --the supervisor
, PRIMARY KEY (TeamID) --include UnitOffering PKs and maybe team ID like we have on BB, a two digit number?
, FOREIGN KEY (ProjectID, UnitID, Semester, Year) REFERENCES Project
, FOREIGN KEY (EmpID, Unit, Semester, Year) REFERENCES EmployeeRole --need to test
);

CREATE TABLE TeamAllocation ( --links an enrolled student to a team (which is already assigned to a unit offering)
TeamID varchar2(10) -- do we need 'not null'
, StuID varchar2(10) -- 'can' be null
, PRIMARY KEY (TeamID, StuID);
, FOREIGN KEY (TeamID) REFERENCES Team
, FOREIGN KEY (StuID) REFERENCES Enrolment
);


-------------------------------------------------------------------------------------


CREATE TABLE Meeting ( --Links a team to a meeting for an offered unit
MeetingID varchar2(2) NOT NULL
TeamID varchar2(10) NOT NULL
, UnitID varchar2(10) NOT NULL
, Semester number(1) NOT NULL
, Year number(4) NOT NULL
, StartTime Date NOT NULL
, FinishTime Date NOT NULL
, Agenda varchar2(1000) --not null?
, Minutes varchar2(1000) --not null?
, ActionItems varchar2(1000) --not null?
, EmpID varchar2(10) NOT NULL --the supervisor (retrieved from the team table)
, PRIMARY KEY (TeamID) --include MeetingID, UnitID, Semester, Year...?
, FOREIGN KEY (TeamID, UnitID, Semester, Year, EmpID) REFERENCES Team
);

CREATE TABLE MeetingAttendance ( --Links a student to a meeting
MeetingID varchar2(10) NOT NULL
, StuID varchar2(10) NOT NULL
, PRIMARY KEY (MeetingID, StudID)
, FOREIGN KEY (MeetingID) REFERENCES Meeting
, FOREIGN KEY (StuID) REFERENCES TeamAllocation
);


-------------------------------------------------------------------------------------
